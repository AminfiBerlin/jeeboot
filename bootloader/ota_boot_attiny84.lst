
ota_boot_attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000742  00001800  00001800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000aa  00800060  00800060  000007b6  2**0
                  ALLOC
  2 .stab         000003cc  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001cd  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000028  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000065  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a30  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000385  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000804  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000354  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000556  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000008e  00000000  00000000  00002ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000188  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001800 <__ctors_end>:
    1800:	11 e0       	ldi	r17, 0x01	; 1
    1802:	a0 e6       	ldi	r26, 0x60	; 96
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	01 c0       	rjmp	.+2      	; 0x180a <.do_clear_bss_start>

00001808 <.do_clear_bss_loop>:
    1808:	1d 92       	st	X+, r1

0000180a <.do_clear_bss_start>:
    180a:	aa 30       	cpi	r26, 0x0A	; 10
    180c:	b1 07       	cpc	r27, r17
    180e:	e1 f7       	brne	.-8      	; 0x1808 <.do_clear_bss_loop>

00001810 <main>:

volatile char dummy;

EMPTY_INTERRUPT(WDT_vect);

int main () {
    1810:	11 24       	eor	r1, r1
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	20 e8       	ldi	r18, 0x80	; 128
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	26 bd       	out	0x26, r18	; 38
    181e:	86 bd       	out	0x26, r24	; 38
    1820:	0f be       	out	0x3f, r0	; 63

  // switch to 4 MHz, the minimum rate needed to use the RFM12B
  clock_prescale_set(clock_div_4);

  // find out whether we got here through a watchdog reset
  byte launch = bitRead(MCUSR, EXTRF);
    1822:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    1824:	14 be       	out	0x34, r1	; 52
  wdt_disable();
    1826:	98 e1       	ldi	r25, 0x18	; 24
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	91 bd       	out	0x21, r25	; 33
    182e:	11 bc       	out	0x21, r1	; 33
    1830:	0f be       	out	0x3f, r0	; 63

  // similar to Adaboot no-wait mod
  if (!launch)
    1832:	81 fd       	sbrc	r24, 1
    1834:	03 c0       	rjmp	.+6      	; 0x183c <main+0x2c>
    ((void(*)()) 0)(); // Jump to RST vector
    1836:	e0 e0       	ldi	r30, 0x00	; 0
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	09 95       	icall
      backoff = 0; // limit the backoff, reset to retry quickly after a while
    // here we go: slow down, waste some processor cyles, and speed up again
    // this has a total cycle time of a few hours, as determined empirically
    // (using a boot server which deliberately replies with a bad remote ID)
    clock_prescale_set(clock_div_256);
    for (long i = 0; i < 10000L << backoff && !dummy; ++i)
    183c:	10 e0       	ldi	r17, 0x00	; 0
  return 0;
}

static byte run () {
  // get EEPROM info, but use defaults if the stored CRC is not valid
  eeprom_read_block(&config, EEADDR, sizeof config);
    183e:	ee ee       	ldi	r30, 0xEE	; 238
    1840:	ae 2e       	mov	r10, r30
    1842:	e0 e0       	ldi	r30, 0x00	; 0
    1844:	be 2e       	mov	r11, r30

  if (config.revision != BOOT_REV || calcCRC(&config, sizeof config) != 0) {
    memset(&config, 0, sizeof config);
    1846:	7c e1       	ldi	r23, 0x1C	; 28
    1848:	57 2e       	mov	r5, r23
/*
  Call this once with the node ID (0-31), frequency band (0-3), and
  optional group (0-255 for RF12B, only 212 allowed for RF12).
*/
static void rf12_initialize (uint8_t id, uint8_t band, uint8_t g) {
    nodeid = id;
    184a:	33 24       	eor	r3, r3
    184c:	33 94       	inc	r3
    184e:	00 e8       	ldi	r16, 0x80	; 128
    1850:	68 e0       	ldi	r22, 0x08	; 8
    1852:	86 2e       	mov	r8, r22
    1854:	91 2c       	mov	r9, r1
    1856:	50 e1       	ldi	r21, 0x10	; 16
    1858:	c5 2e       	mov	r12, r21
    185a:	57 e2       	ldi	r21, 0x27	; 39
    185c:	d5 2e       	mov	r13, r21
    185e:	e1 2c       	mov	r14, r1
    1860:	f1 2c       	mov	r15, r1
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	64 2e       	mov	r6, r20
    1866:	71 2c       	mov	r7, r1
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <main+0xa8>
  while (run() > 100) {
    // the boot re-flashing failed for some reason, although the boot server
    // did respond, so do an exponential back-off with the clock speed reduced
    // (not as low-power as power down, but doesn't need watchdog interrupts)
    if (++backoff > 10)
      backoff = 0; // limit the backoff, reset to retry quickly after a while
    186a:	10 e0       	ldi	r17, 0x00	; 0
    186c:	c4 01       	movw	r24, r8
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	06 bd       	out	0x26, r16	; 38
    1874:	86 bd       	out	0x26, r24	; 38
    1876:	0f be       	out	0x3f, r0	; 63
    // here we go: slow down, waste some processor cyles, and speed up again
    // this has a total cycle time of a few hours, as determined empirically
    // (using a boot server which deliberately replies with a bad remote ID)
    clock_prescale_set(clock_div_256);
    for (long i = 0; i < 10000L << backoff && !dummy; ++i)
    1878:	a7 01       	movw	r20, r14
    187a:	96 01       	movw	r18, r12
    187c:	01 2e       	mov	r0, r17
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <main+0x78>
    1880:	22 0f       	add	r18, r18
    1882:	33 1f       	adc	r19, r19
    1884:	44 1f       	adc	r20, r20
    1886:	55 1f       	adc	r21, r21
    1888:	0a 94       	dec	r0
    188a:	d2 f7       	brpl	.-12     	; 0x1880 <main+0x70>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	dc 01       	movw	r26, r24
    1892:	03 c0       	rjmp	.+6      	; 0x189a <main+0x8a>
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	a1 1d       	adc	r26, r1
    1898:	b1 1d       	adc	r27, r1
    189a:	82 17       	cp	r24, r18
    189c:	93 07       	cpc	r25, r19
    189e:	a4 07       	cpc	r26, r20
    18a0:	b5 07       	cpc	r27, r21
    18a2:	24 f4       	brge	.+8      	; 0x18ac <main+0x9c>
    18a4:	60 91 eb 00 	lds	r22, 0x00EB
    18a8:	66 23       	and	r22, r22
    18aa:	a1 f3       	breq	.-24     	; 0x1894 <main+0x84>
    18ac:	f3 01       	movw	r30, r6
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	06 bd       	out	0x26, r16	; 38
    18b4:	e6 bd       	out	0x26, r30	; 38
    18b6:	0f be       	out	0x3f, r0	; 63
  return 0;
}

static byte run () {
  // get EEPROM info, but use defaults if the stored CRC is not valid
  eeprom_read_block(&config, EEADDR, sizeof config);
    18b8:	8e ee       	ldi	r24, 0xEE	; 238
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	60 ee       	ldi	r22, 0xE0	; 224
    18be:	73 e0       	ldi	r23, 0x03	; 3
    18c0:	4c e1       	ldi	r20, 0x1C	; 28
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	17 d3       	rcall	.+1582   	; 0x1ef4 <__eerd_block_tn84>

  if (config.revision != BOOT_REV || calcCRC(&config, sizeof config) != 0) {
    18c6:	80 91 ee 00 	lds	r24, 0x00EE
    18ca:	87 70       	andi	r24, 0x07	; 7
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <main+0xc8>
    18ce:	8c e1       	ldi	r24, 0x1C	; 28
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	b4 d2       	rcall	.+1384   	; 0x1e3c <calcCRC.clone.3>
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	59 f0       	breq	.+22     	; 0x18ee <main+0xde>
    memset(&config, 0, sizeof config);
    18d8:	f5 01       	movw	r30, r10
    18da:	45 2d       	mov	r20, r5
    18dc:	11 92       	st	Z+, r1
    18de:	4a 95       	dec	r20
    18e0:	e9 f7       	brne	.-6      	; 0x18dc <main+0xcc>
    config.revision = BOOT_REV;
    config.srvFreq = BOOT_FREQ;
    18e2:	80 91 ee 00 	lds	r24, 0x00EE
    18e6:	87 70       	andi	r24, 0x07	; 7
    config.srvGroup = BOOT_GROUP - BOOT_BASE;
    18e8:	80 6d       	ori	r24, 0xD0	; 208
    18ea:	80 93 ee 00 	sts	0x00EE, r24
  }

  rf12_initialize(BOOT_ARCH, config.srvFreq, config.srvGroup + BOOT_BASE);
    18ee:	40 90 ee 00 	lds	r4, 0x00EE
    18f2:	24 2c       	mov	r2, r4
    18f4:	26 94       	lsr	r2
    18f6:	26 94       	lsr	r2
    18f8:	26 94       	lsr	r2
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	28 22       	and	r2, r24
    18fe:	42 94       	swap	r4
    1900:	46 94       	lsr	r4
    1902:	37 e0       	ldi	r19, 0x07	; 7
    1904:	43 22       	and	r4, r19
    1906:	98 ef       	ldi	r25, 0xF8	; 248
    1908:	49 0e       	add	r4, r25
    190a:	30 92 60 00 	sts	0x0060, r3
    group = g;
    190e:	40 92 61 00 	sts	0x0061, r4

volatile uint16_t rf12_crc;         // running crc value
volatile uint8_t rf12_buf[RF_MAX];  // recv/xmit buf, including hdr & crc bytes

static void spi_initialize () {
    bitSet(SS_PORT, SS_BIT);
    1912:	df 9a       	sbi	0x1b, 7	; 27
    bitSet(SS_DDR, SS_BIT);
    1914:	d7 9a       	sbi	0x1a, 7	; 26
    // digitalWrite(SPI_SS, 1);
    bitSet(DDRB, 2);
    1916:	ba 9a       	sbi	0x17, 2	; 23
    // pinMode(SPI_SS, OUTPUT);
    // pinMode(SPI_MOSI, OUTPUT);
    // pinMode(SPI_MISO, INPUT);
    // pinMode(SPI_SCK, OUTPUT);
    DDRB |= bit(2) | bit(3) | bit(4) | bit(5);
    1918:	87 b3       	in	r24, 0x17	; 23
    191a:	8c 63       	ori	r24, 0x3C	; 60
    191c:	87 bb       	out	0x17, r24	; 23
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    SPSR |= _BV(SPI2X);
#endif
#else
    // ATtiny
    USICR = bit(USIWM0);
    191e:	e0 e1       	ldi	r30, 0x10	; 16
    1920:	ed b9       	out	0x0d, r30	; 13
    
    spi_initialize();
    
    // pinMode(RFM_IRQ, INPUT);
    // digitalWrite(RFM_IRQ, 1); // pull-up
    bitClear(RFM_IRQ_DDR, RFM_IRQ_BIT);
    1922:	b9 98       	cbi	0x17, 1	; 23
    bitSet(RFM_IRQ_PORT, RFM_IRQ_BIT);
    1924:	c1 9a       	sbi	0x18, 1	; 24

    rf12_xfer(0x0000); // intitial SPI transfer added to avoid power-up problem
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	26 d1       	rcall	.+588    	; 0x1b78 <rf12_xfer>

    rf12_xfer(RF_SLEEP_MODE); // DC (disable clk pin), enable lbd
    192c:	85 e0       	ldi	r24, 0x05	; 5
    192e:	92 e8       	ldi	r25, 0x82	; 130
    1930:	23 d1       	rcall	.+582    	; 0x1b78 <rf12_xfer>
    
    // wait until RFM12B is out of power-up reset, this takes several *seconds*
    rf12_xfer(RF_TXREG_WRITE); // in case we're still in OOK mode
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	98 eb       	ldi	r25, 0xB8	; 184
    1936:	02 c0       	rjmp	.+4      	; 0x193c <main+0x12c>
    // while (digitalRead(RFM_IRQ) == 0)
    while (bitRead(RFM_IRQ_PIN, RFM_IRQ_BIT) == 0)
        rf12_xfer(0x0000);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	1d d1       	rcall	.+570    	; 0x1b78 <rf12_xfer>
    rf12_xfer(RF_SLEEP_MODE); // DC (disable clk pin), enable lbd
    
    // wait until RFM12B is out of power-up reset, this takes several *seconds*
    rf12_xfer(RF_TXREG_WRITE); // in case we're still in OOK mode
    // while (digitalRead(RFM_IRQ) == 0)
    while (bitRead(RFM_IRQ_PIN, RFM_IRQ_BIT) == 0)
    193e:	86 b3       	in	r24, 0x16	; 22
    1940:	81 ff       	sbrs	r24, 1
    1942:	fa cf       	rjmp	.-12     	; 0x1938 <main+0x128>
        rf12_xfer(0x0000);
        
    rf12_xfer(0x80C7 | (band << 4)); // EL (ena TX), EF (ena RX FIFO), 12.0pF 
    1944:	82 2d       	mov	r24, r2
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	24 e0       	ldi	r18, 0x04	; 4
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	2a 95       	dec	r18
    1950:	e1 f7       	brne	.-8      	; 0x194a <main+0x13a>
    1952:	87 6c       	ori	r24, 0xC7	; 199
    1954:	90 68       	ori	r25, 0x80	; 128
    1956:	10 d1       	rcall	.+544    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xA640); // 868MHz 
    1958:	80 e4       	ldi	r24, 0x40	; 64
    195a:	96 ea       	ldi	r25, 0xA6	; 166
    195c:	0d d1       	rcall	.+538    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xC606); // approx 49.2 Kbps, i.e. 10000/29/(1+6) Kbps
    195e:	86 e0       	ldi	r24, 0x06	; 6
    1960:	96 ec       	ldi	r25, 0xC6	; 198
    1962:	0a d1       	rcall	.+532    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0x94A2); // VDI,FAST,134kHz,0dBm,-91dBm 
    1964:	82 ea       	ldi	r24, 0xA2	; 162
    1966:	94 e9       	ldi	r25, 0x94	; 148
    1968:	07 d1       	rcall	.+526    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xC2AC); // AL,!ml,DIG,DQD4 
    196a:	8c ea       	ldi	r24, 0xAC	; 172
    196c:	92 ec       	ldi	r25, 0xC2	; 194
    196e:	04 d1       	rcall	.+520    	; 0x1b78 <rf12_xfer>
    if (group != 0) {
        rf12_xfer(0xCA83); // FIFO8,2-SYNC,!ff,DR 
    1970:	83 e8       	ldi	r24, 0x83	; 131
    1972:	9a ec       	ldi	r25, 0xCA	; 202
    1974:	01 d1       	rcall	.+514    	; 0x1b78 <rf12_xfer>
        rf12_xfer(0xCE00 | group); // SYNC=2DXX； 
    1976:	84 2d       	mov	r24, r4
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9e 6c       	ori	r25, 0xCE	; 206
    197c:	fd d0       	rcall	.+506    	; 0x1b78 <rf12_xfer>
    } else {
        rf12_xfer(0xCA8B); // FIFO8,1-SYNC,!ff,DR 
        rf12_xfer(0xCE2D); // SYNC=2D； 
    }
    rf12_xfer(0xC483); // @PWR,NO RSTRIC,!st,!fi,OE,EN 
    197e:	83 e8       	ldi	r24, 0x83	; 131
    1980:	94 ec       	ldi	r25, 0xC4	; 196
    1982:	fa d0       	rcall	.+500    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0x9850); // !mp,90kHz,MAX OUT 
    1984:	80 e5       	ldi	r24, 0x50	; 80
    1986:	98 e9       	ldi	r25, 0x98	; 152
    1988:	f7 d0       	rcall	.+494    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xCC77); // OB1，OB0, LPX,！ddy，DDIT，BW0 
    198a:	87 e7       	ldi	r24, 0x77	; 119
    198c:	9c ec       	ldi	r25, 0xCC	; 204
    198e:	f4 d0       	rcall	.+488    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xE000); // NOT USE 
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 ee       	ldi	r25, 0xE0	; 224
    1994:	f1 d0       	rcall	.+482    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xC800); // NOT USE 
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	98 ec       	ldi	r25, 0xC8	; 200
    199a:	ee d0       	rcall	.+476    	; 0x1b78 <rf12_xfer>
    rf12_xfer(0xC049); // 1.66MHz,3.1V 
    199c:	89 e4       	ldi	r24, 0x49	; 73
    199e:	90 ec       	ldi	r25, 0xC0	; 192
    19a0:	eb d0       	rcall	.+470    	; 0x1b78 <rf12_xfer>

    rxstate = TXIDLE;
    19a2:	f4 e0       	ldi	r31, 0x04	; 4
    19a4:	f0 93 62 00 	sts	0x0062, r31

  // send an update check to the boot server - just once, no retries
  byte bytes = sendPacket(&config.remoteID, sizeof config.remoteID);
    19a8:	82 ef       	ldi	r24, 0xF2	; 242
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	62 e0       	ldi	r22, 0x02	; 2
    19ae:	ec d1       	rcall	.+984    	; 0x1d88 <sendPacket>
  if (bytes != sizeof (struct BootReply))
    19b0:	86 30       	cpi	r24, 0x06	; 6
    19b2:	29 f0       	breq	.+10     	; 0x19be <main+0x1ae>
    return validSketch() ? 100 : 101; // unexpected reply length
    19b4:	60 d2       	rcall	.+1216   	; 0x1e76 <validSketch>
    19b6:	88 23       	and	r24, r24
    19b8:	09 f4       	brne	.+2      	; 0x19bc <main+0x1ac>
    19ba:	a1 c0       	rjmp	.+322    	; 0x1afe <main+0x2ee>
    19bc:	a6 c0       	rjmp	.+332    	; 0x1b0a <main+0x2fa>

  // the reply tells us which sketch version we should be running
  struct BootReply *reply = (struct BootReply*) rf12_data;
  if (reply->remoteID != config.remoteID)
    19be:	20 91 67 00 	lds	r18, 0x0067
    19c2:	30 91 68 00 	lds	r19, 0x0068
    19c6:	80 91 f2 00 	lds	r24, 0x00F2
    19ca:	90 91 f3 00 	lds	r25, 0x00F3
    19ce:	28 17       	cp	r18, r24
    19d0:	39 07       	cpc	r19, r25
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <main+0x1c6>
    19d4:	94 c0       	rjmp	.+296    	; 0x1afe <main+0x2ee>
    return 102; // this reply isn't for me

  // only reflash if desired version is different or current rom is invalid
  if (memcmp(&config.remoteID, reply, bytes) != 0 || !validSketch()) {
    19d6:	82 ef       	ldi	r24, 0xF2	; 242
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	67 e6       	ldi	r22, 0x67	; 103
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	46 e0       	ldi	r20, 0x06	; 6
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	72 d2       	rcall	.+1252   	; 0x1ec8 <memcmp>
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <main+0x1e0>
    19e8:	46 d2       	rcall	.+1164   	; 0x1e76 <validSketch>
    19ea:	88 23       	and	r24, r24
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <main+0x1e0>
    19ee:	85 c0       	rjmp	.+266    	; 0x1afa <main+0x2ea>

    // permanently save the desired sketch info in EEPROM
    memcpy(&config.remoteID, reply, bytes);
    19f0:	a2 ef       	ldi	r26, 0xF2	; 242
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e7 e6       	ldi	r30, 0x67	; 103
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	86 e0       	ldi	r24, 0x06	; 6
    19fa:	01 90       	ld	r0, Z+
    19fc:	0d 92       	st	X+, r0
    19fe:	81 50       	subi	r24, 0x01	; 1
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <main+0x1ea>
    config.crc = calcCRC(&config, sizeof config - 2);
    1a02:	8a e1       	ldi	r24, 0x1A	; 26
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	1a d2       	rcall	.+1076   	; 0x1e3c <calcCRC.clone.3>
    1a08:	90 93 09 01 	sts	0x0109, r25
    1a0c:	80 93 08 01 	sts	0x0108, r24
    eeprom_write_block(&config, EEADDR, sizeof config);
    1a10:	8e ee       	ldi	r24, 0xEE	; 238
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	60 ee       	ldi	r22, 0xE0	; 224
    1a16:	73 e0       	ldi	r23, 0x03	; 3
    1a18:	4c e1       	ldi	r20, 0x1C	; 28
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	7b d2       	rcall	.+1270   	; 0x1f14 <__eewr_block_tn84>

    // start the re-flashing loop, asking for all the necessary data as ACKs
    struct DataRequest dreq;
    dreq.remoteID = config.remoteID;
    1a1e:	80 91 f2 00 	lds	r24, 0x00F2
    1a22:	90 91 f3 00 	lds	r25, 0x00F3
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01

    for (dreq.block = 0; dreq.block < config.sketchBlocks; ++dreq.block) {
    1a2a:	1c 82       	std	Y+4, r1	; 0x04
    1a2c:	1b 82       	std	Y+3, r1	; 0x03
    1a2e:	b3 e0       	ldi	r27, 0x03	; 3
    1a30:	fb 2e       	mov	r15, r27
      // ask for the next block, retrying a few times
      byte attempts = 3;
      for (;;) {
        if (sendPacket(&dreq, sizeof dreq) == 66) {
    1a32:	8e 01       	movw	r16, r28
    1a34:	0f 5f       	subi	r16, 0xFF	; 255
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
  boot_spm_busy_wait ();      // Wait until the memory is erased.

  for (word i = 0; i < SPM_PAGESIZE; i += 2) {
    word w = *buf++;
    w += (*buf++) << 8;
    boot_page_fill (page + i, w);
    1a38:	cc 24       	eor	r12, r12
    1a3a:	c3 94       	inc	r12
  }

  boot_page_write (page);     // Store buffer in flash page.
    1a3c:	a5 e0       	ldi	r26, 0x05	; 5
    1a3e:	ea 2e       	mov	r14, r26
    1a40:	52 c0       	rjmp	.+164    	; 0x1ae6 <main+0x2d6>

    // start the re-flashing loop, asking for all the necessary data as ACKs
    struct DataRequest dreq;
    dreq.remoteID = config.remoteID;

    for (dreq.block = 0; dreq.block < config.sketchBlocks; ++dreq.block) {
    1a42:	f3 e0       	ldi	r31, 0x03	; 3
    1a44:	af 2e       	mov	r10, r31
      // ask for the next block, retrying a few times
      byte attempts = 3;
      for (;;) {
        if (sendPacket(&dreq, sizeof dreq) == 66) {
    1a46:	c8 01       	movw	r24, r16
    1a48:	64 e0       	ldi	r22, 0x04	; 4
    1a4a:	9e d1       	rcall	.+828    	; 0x1d88 <sendPacket>
    1a4c:	82 34       	cpi	r24, 0x42	; 66
    1a4e:	69 f4       	brne	.+26     	; 0x1a6a <main+0x25a>
          word check = *((const word*) rf12_data);
          if (check == (dreq.remoteID ^ dreq.block))
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	82 27       	eor	r24, r18
    1a5a:	93 27       	eor	r25, r19
    1a5c:	40 91 67 00 	lds	r20, 0x0067
    1a60:	50 91 68 00 	lds	r21, 0x0068
    1a64:	48 17       	cp	r20, r24
    1a66:	59 07       	cpc	r21, r25
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <main+0x260>
            break;
        }
        if (--attempts == 0)
    1a6a:	aa 94       	dec	r10
    1a6c:	61 f7       	brne	.-40     	; 0x1a46 <main+0x236>
    1a6e:	4d c0       	rjmp	.+154    	; 0x1b0a <main+0x2fa>
          return 3; // too many failed attempts to get the next data block
      }

      // save recv'd data, currently only works for a page size of 128 bytes    
      byte off = (dreq.block << 6) % SPM_PAGESIZE;
      memcpy(progBuf + off, (const byte*) rf12_data + 2, 64);
    1a70:	ab ea       	ldi	r26, 0xAB	; 171
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e9 e6       	ldi	r30, 0x69	; 105
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 e4       	ldi	r24, 0x40	; 64
    1a7a:	01 90       	ld	r0, Z+
    1a7c:	0d 92       	st	X+, r0
    1a7e:	81 50       	subi	r24, 0x01	; 1
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <main+0x26a>
      if (off == SPM_PAGESIZE - 64)
        boot_program_page((dreq.block & ~1) << 6, progBuf);
    1a82:	c9 01       	movw	r24, r18
    1a84:	8e 7f       	andi	r24, 0xFE	; 254
    1a86:	e6 e0       	ldi	r30, 0x06	; 6
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	ea 95       	dec	r30
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <main+0x278>
// see http://www.nongnu.org/avr-libc/user-manual/group__avr__boot.html
static void boot_program_page (uint32_t page, byte *buf) {
  // byte sreg = SREG;
  // cli();

  eeprom_busy_wait ();
    1a90:	e1 99       	sbic	0x1c, 1	; 28
    1a92:	fe cf       	rjmp	.-4      	; 0x1a90 <main+0x280>

  boot_page_erase (page);
    1a94:	fc 01       	movw	r30, r24
    1a96:	f0 92 57 00 	sts	0x0057, r15
    1a9a:	e8 95       	spm
  boot_spm_busy_wait ();      // Wait until the memory is erased.
    1a9c:	07 b6       	in	r0, 0x37	; 55
    1a9e:	00 fc       	sbrc	r0, 0
    1aa0:	fd cf       	rjmp	.-6      	; 0x1a9c <main+0x28c>

volatile char dummy;

EMPTY_INTERRUPT(WDT_vect);

int main () {
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	ab ea       	ldi	r26, 0xAB	; 171
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0

  for (word i = 0; i < SPM_PAGESIZE; i += 2) {
    word w = *buf++;
    1aa8:	6c 91       	ld	r22, X
    w += (*buf++) << 8;
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	4c 91       	ld	r20, X
    1aae:	11 97       	sbiw	r26, 0x01	; 1
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	54 2f       	mov	r21, r20
    1ab4:	44 27       	eor	r20, r20
    1ab6:	46 0f       	add	r20, r22
    1ab8:	51 1d       	adc	r21, r1
    1aba:	12 96       	adiw	r26, 0x02	; 2
    boot_page_fill (page + i, w);
    1abc:	0a 01       	movw	r0, r20
    1abe:	c0 92 57 00 	sts	0x0057, r12
    1ac2:	e8 95       	spm
    1ac4:	11 24       	eor	r1, r1
    1ac6:	32 96       	adiw	r30, 0x02	; 2
  eeprom_busy_wait ();

  boot_page_erase (page);
  boot_spm_busy_wait ();      // Wait until the memory is erased.

  for (word i = 0; i < SPM_PAGESIZE; i += 2) {
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	ab 3e       	cpi	r26, 0xEB	; 235
    1acc:	b4 07       	cpc	r27, r20
    1ace:	61 f7       	brne	.-40     	; 0x1aa8 <main+0x298>
    word w = *buf++;
    w += (*buf++) << 8;
    boot_page_fill (page + i, w);
  }

  boot_page_write (page);     // Store buffer in flash page.
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	e0 92 57 00 	sts	0x0057, r14
    1ad6:	e8 95       	spm
  boot_spm_busy_wait();       // Wait until the memory is written.
    1ad8:	07 b6       	in	r0, 0x37	; 55
    1ada:	00 fc       	sbrc	r0, 0
    1adc:	fd cf       	rjmp	.-6      	; 0x1ad8 <main+0x2c8>

    // start the re-flashing loop, asking for all the necessary data as ACKs
    struct DataRequest dreq;
    dreq.remoteID = config.remoteID;

    for (dreq.block = 0; dreq.block < config.sketchBlocks; ++dreq.block) {
    1ade:	2f 5f       	subi	r18, 0xFF	; 255
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	80 91 f4 00 	lds	r24, 0x00F4
    1aee:	90 91 f5 00 	lds	r25, 0x00F5
    1af2:	28 17       	cp	r18, r24
    1af4:	39 07       	cpc	r19, r25
    1af6:	08 f4       	brcc	.+2      	; 0x1afa <main+0x2ea>
    1af8:	a4 cf       	rjmp	.-184    	; 0x1a42 <main+0x232>
      if (off == SPM_PAGESIZE - 64)
        boot_program_page((dreq.block & ~1) << 6, progBuf);
    }
  }

  if (!validSketch())
    1afa:	bd d1       	rcall	.+890    	; 0x1e76 <validSketch>
    1afc:	06 c0       	rjmp	.+12     	; 0x1b0a <main+0x2fa>
  byte backoff = 0;
  while (run() > 100) {
    // the boot re-flashing failed for some reason, although the boot server
    // did respond, so do an exponential back-off with the clock speed reduced
    // (not as low-power as power down, but doesn't need watchdog interrupts)
    if (++backoff > 10)
    1afe:	1f 5f       	subi	r17, 0xFF	; 255
    1b00:	1b 30       	cpi	r17, 0x0B	; 11
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <main+0x2f6>
    1b04:	b2 ce       	rjmp	.-668    	; 0x186a <main+0x5a>
    1b06:	b2 ce       	rjmp	.-668    	; 0x186c <main+0x5c>
    1b08:	ff cf       	rjmp	.-2      	; 0x1b08 <main+0x2f8>
      ;
    clock_prescale_set(clock_div_4);
  }

  // force a clean reset to launch the actual code
  wdt_enable(WDTO_15MS);
    1b0a:	28 e0       	ldi	r18, 0x08	; 8
    1b0c:	88 e1       	ldi	r24, 0x18	; 24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	a8 95       	wdr
    1b16:	81 bd       	out	0x21, r24	; 33
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	21 bd       	out	0x21, r18	; 33
    1b1c:	f5 cf       	rjmp	.-22     	; 0x1b08 <main+0x2f8>

00001b1e <_crc16_update>:
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
	return __ret;
}
    1b1e:	86 27       	eor	r24, r22
    1b20:	68 2f       	mov	r22, r24
    1b22:	62 95       	swap	r22
    1b24:	68 27       	eor	r22, r24
    1b26:	06 2e       	mov	r0, r22
    1b28:	66 95       	lsr	r22
    1b2a:	66 95       	lsr	r22
    1b2c:	60 25       	eor	r22, r0
    1b2e:	06 2e       	mov	r0, r22
    1b30:	66 95       	lsr	r22
    1b32:	60 25       	eor	r22, r0
    1b34:	67 70       	andi	r22, 0x07	; 7
    1b36:	08 2e       	mov	r0, r24
    1b38:	89 2f       	mov	r24, r25
    1b3a:	66 95       	lsr	r22
    1b3c:	07 94       	ror	r0
    1b3e:	67 95       	ror	r22
    1b40:	90 2d       	mov	r25, r0
    1b42:	86 27       	eor	r24, r22
    1b44:	06 94       	lsr	r0
    1b46:	67 95       	ror	r22
    1b48:	90 25       	eor	r25, r0
    1b4a:	86 27       	eor	r24, r22
    1b4c:	08 95       	ret

00001b4e <rf12_byte>:
    while (!(SPSR & _BV(SPIF)))
        ;
    return SPDR;
#else
    // ATtiny
    USIDR = out;
    1b4e:	8f b9       	out	0x0f, r24	; 15
    byte v1 = bit(USIWM0) | bit(USITC);
    byte v2 = bit(USIWM0) | bit(USITC) | bit(USICLK);
#if F_CPU <= 5000000
    // only unroll if resulting clock stays under 2.5 MHz
    USICR = v1; USICR = v2;
    1b50:	91 e1       	ldi	r25, 0x11	; 17
    1b52:	9d b9       	out	0x0d, r25	; 13
    1b54:	83 e1       	ldi	r24, 0x13	; 19
    1b56:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b58:	9d b9       	out	0x0d, r25	; 13
    1b5a:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b5c:	9d b9       	out	0x0d, r25	; 13
    1b5e:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b60:	9d b9       	out	0x0d, r25	; 13
    1b62:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b64:	9d b9       	out	0x0d, r25	; 13
    1b66:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b68:	9d b9       	out	0x0d, r25	; 13
    1b6a:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b6c:	9d b9       	out	0x0d, r25	; 13
    1b6e:	8d b9       	out	0x0d, r24	; 13
    USICR = v1; USICR = v2;
    1b70:	9d b9       	out	0x0d, r25	; 13
    1b72:	8d b9       	out	0x0d, r24	; 13
    for (uint8_t i = 0; i < 8; ++i) {
        USICR = v1;
        USICR = v2;
    }
#endif
    return USIDR;
    1b74:	8f b1       	in	r24, 0x0f	; 15
#endif
}
    1b76:	08 95       	ret

00001b78 <rf12_xfer>:

static uint16_t rf12_xfer (uint16_t cmd) {
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	ec 01       	movw	r28, r24
    bitClear(SS_PORT, SS_BIT);
    1b82:	df 98       	cbi	0x1b, 7	; 27
    uint16_t reply = rf12_byte(cmd >> 8) << 8;
    1b84:	8d 2f       	mov	r24, r29
    1b86:	e3 df       	rcall	.-58     	; 0x1b4e <rf12_byte>
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	18 2f       	mov	r17, r24
    1b8c:	00 27       	eor	r16, r16
    reply |= rf12_byte(cmd);
    1b8e:	8c 2f       	mov	r24, r28
    1b90:	de df       	rcall	.-68     	; 0x1b4e <rf12_byte>
    bitSet(SS_PORT, SS_BIT);
    1b92:	df 9a       	sbi	0x1b, 7	; 27
}

static uint16_t rf12_xfer (uint16_t cmd) {
    bitClear(SS_PORT, SS_BIT);
    uint16_t reply = rf12_byte(cmd >> 8) << 8;
    reply |= rf12_byte(cmd);
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    bitSet(SS_PORT, SS_BIT);
    return reply;
}
    1b96:	80 2b       	or	r24, r16
    1b98:	91 2b       	or	r25, r17
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <rf12_recvDone>:
#endif
    rxstate = TXRECV;    
    rf12_xfer(RF_RECEIVER_ON);
}

static uint8_t rf12_recvDone () {
    1ba4:	cf 93       	push	r28
    // if (digitalRead(RFM_IRQ) == 0)
    if (bitRead(RFM_IRQ_PIN, RFM_IRQ_BIT) == 0)
    1ba6:	86 b3       	in	r24, 0x16	; 22
    1ba8:	86 95       	lsr	r24
    1baa:	80 fd       	sbrc	r24, 0
    1bac:	93 c0       	rjmp	.+294    	; 0x1cd4 <rf12_recvDone+0x130>
    return reply;
}

static void rf12_interrupt() {
    // a transfer of 2x 16 bits @ 2 MHz over SPI takes 2x 8 us inside this ISR
    rf12_xfer(0x0000);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	e2 df       	rcall	.-60     	; 0x1b78 <rf12_xfer>
    
    if (rxstate == TXRECV) {
    1bb4:	80 91 62 00 	lds	r24, 0x0062
    1bb8:	85 30       	cpi	r24, 0x05	; 5
    1bba:	d9 f5       	brne	.+118    	; 0x1c32 <rf12_recvDone+0x8e>
        uint8_t in = rf12_xfer(RF_RX_FIFO_READ);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 eb       	ldi	r25, 0xB0	; 176
    1bc0:	db df       	rcall	.-74     	; 0x1b78 <rf12_xfer>
    1bc2:	68 2f       	mov	r22, r24

        if (rxfill == 0 && group != 0)
    1bc4:	80 91 63 00 	lds	r24, 0x0063
    1bc8:	88 23       	and	r24, r24
    1bca:	71 f4       	brne	.+28     	; 0x1be8 <rf12_recvDone+0x44>
    1bcc:	90 91 61 00 	lds	r25, 0x0061
    1bd0:	99 23       	and	r25, r25
    1bd2:	51 f0       	breq	.+20     	; 0x1be8 <rf12_recvDone+0x44>
            rf12_buf[rxfill++] = group;
    1bd4:	80 91 63 00 	lds	r24, 0x0063
    1bd8:	e8 2f       	mov	r30, r24
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	ec 59       	subi	r30, 0x9C	; 156
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	90 83       	st	Z, r25
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	80 93 63 00 	sts	0x0063, r24
            
        rf12_buf[rxfill++] = in;
    1be8:	80 91 63 00 	lds	r24, 0x0063
    1bec:	e8 2f       	mov	r30, r24
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	ec 59       	subi	r30, 0x9C	; 156
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 83       	st	Z, r22
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	80 93 63 00 	sts	0x0063, r24
        rf12_crc = _crc16_update(rf12_crc, in);
    1bfc:	80 91 ec 00 	lds	r24, 0x00EC
    1c00:	90 91 ed 00 	lds	r25, 0x00ED
    1c04:	8c df       	rcall	.-232    	; 0x1b1e <_crc16_update>
    1c06:	90 93 ed 00 	sts	0x00ED, r25
    1c0a:	80 93 ec 00 	sts	0x00EC, r24

        if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX)
    1c0e:	80 91 66 00 	lds	r24, 0x0066
    1c12:	20 91 63 00 	lds	r18, 0x0063
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	04 96       	adiw	r24, 0x04	; 4
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	82 17       	cp	r24, r18
    1c1e:	93 07       	cpc	r25, r19
    1c20:	2c f0       	brlt	.+10     	; 0x1c2c <rf12_recvDone+0x88>
    1c22:	80 91 63 00 	lds	r24, 0x0063
    1c26:	87 34       	cpi	r24, 0x47	; 71
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <rf12_recvDone+0x88>
    1c2a:	54 c0       	rjmp	.+168    	; 0x1cd4 <rf12_recvDone+0x130>
            rf12_xfer(RF_IDLE_MODE);
    1c2c:	8d e0       	ldi	r24, 0x0D	; 13
    1c2e:	92 e8       	ldi	r25, 0x82	; 130
    1c30:	50 c0       	rjmp	.+160    	; 0x1cd2 <rf12_recvDone+0x12e>
    } else {
        uint8_t out;

        if (rxstate < 0) {
    1c32:	80 91 62 00 	lds	r24, 0x0062
    1c36:	87 ff       	sbrs	r24, 7
    1c38:	19 c0       	rjmp	.+50     	; 0x1c6c <rf12_recvDone+0xc8>
            uint8_t pos = 3 + rf12_len + rxstate++;
    1c3a:	e0 91 66 00 	lds	r30, 0x0066
    1c3e:	80 91 62 00 	lds	r24, 0x0062
    1c42:	98 2f       	mov	r25, r24
    1c44:	9f 5f       	subi	r25, 0xFF	; 255
    1c46:	90 93 62 00 	sts	0x0062, r25
    1c4a:	ed 5f       	subi	r30, 0xFD	; 253
    1c4c:	e8 0f       	add	r30, r24
            out = rf12_buf[pos];
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	ec 59       	subi	r30, 0x9C	; 156
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	c0 81       	ld	r28, Z
            rf12_crc = _crc16_update(rf12_crc, out);
    1c56:	80 91 ec 00 	lds	r24, 0x00EC
    1c5a:	90 91 ed 00 	lds	r25, 0x00ED
    1c5e:	6c 2f       	mov	r22, r28
    1c60:	5e df       	rcall	.-324    	; 0x1b1e <_crc16_update>
    1c62:	90 93 ed 00 	sts	0x00ED, r25
    1c66:	80 93 ec 00 	sts	0x00EC, r24
    1c6a:	2f c0       	rjmp	.+94     	; 0x1cca <rf12_recvDone+0x126>
        } else
            switch (rxstate++) {
    1c6c:	80 91 62 00 	lds	r24, 0x0062
    1c70:	98 2f       	mov	r25, r24
    1c72:	9f 5f       	subi	r25, 0xFF	; 255
    1c74:	90 93 62 00 	sts	0x0062, r25
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	19 f1       	breq	.+70     	; 0x1cc2 <rf12_recvDone+0x11e>
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <rf12_recvDone+0xe6>
    1c80:	88 23       	and	r24, r24
    1c82:	99 f0       	breq	.+38     	; 0x1caa <rf12_recvDone+0x106>
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	01 f5       	brne	.+64     	; 0x1cc8 <rf12_recvDone+0x124>
    1c88:	16 c0       	rjmp	.+44     	; 0x1cb6 <rf12_recvDone+0x112>
    1c8a:	89 30       	cpi	r24, 0x09	; 9
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <rf12_recvDone+0xf0>
    1c8e:	8a 30       	cpi	r24, 0x0A	; 10
    1c90:	d9 f4       	brne	.+54     	; 0x1cc8 <rf12_recvDone+0x124>
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <rf12_recvDone+0xf4>
                case TXSYN1: out = 0x2D; break;
    1c94:	cd e2       	ldi	r28, 0x2D	; 45
    1c96:	19 c0       	rjmp	.+50     	; 0x1cca <rf12_recvDone+0x126>
                case TXSYN2: out = rf12_grp; rxstate = - (2 + rf12_len); break;
    1c98:	c0 91 64 00 	lds	r28, 0x0064
    1c9c:	90 91 66 00 	lds	r25, 0x0066
    1ca0:	8e ef       	ldi	r24, 0xFE	; 254
    1ca2:	89 1b       	sub	r24, r25
    1ca4:	80 93 62 00 	sts	0x0062, r24
    1ca8:	10 c0       	rjmp	.+32     	; 0x1cca <rf12_recvDone+0x126>
                case TXCRC1: out = rf12_crc; break;
    1caa:	80 91 ec 00 	lds	r24, 0x00EC
    1cae:	90 91 ed 00 	lds	r25, 0x00ED
    1cb2:	c8 2f       	mov	r28, r24
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <rf12_recvDone+0x126>
                case TXCRC2: out = rf12_crc >> 8; break;
    1cb6:	80 91 ec 00 	lds	r24, 0x00EC
    1cba:	90 91 ed 00 	lds	r25, 0x00ED
    1cbe:	c9 2f       	mov	r28, r25
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <rf12_recvDone+0x126>
                case TXDONE: rf12_xfer(RF_IDLE_MODE); // fall through
    1cc2:	8d e0       	ldi	r24, 0x0D	; 13
    1cc4:	92 e8       	ldi	r25, 0x82	; 130
    1cc6:	58 df       	rcall	.-336    	; 0x1b78 <rf12_xfer>
                default:     out = 0xAA;
    1cc8:	ca ea       	ldi	r28, 0xAA	; 170
            }
            
        rf12_xfer(RF_TXREG_WRITE + out);
    1cca:	8c 2f       	mov	r24, r28
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	80 50       	subi	r24, 0x00	; 0
    1cd0:	98 44       	sbci	r25, 0x48	; 72
    1cd2:	52 df       	rcall	.-348    	; 0x1b78 <rf12_xfer>
static uint8_t rf12_recvDone () {
    // if (digitalRead(RFM_IRQ) == 0)
    if (bitRead(RFM_IRQ_PIN, RFM_IRQ_BIT) == 0)
        rf12_interrupt();
        
    if (rxstate == TXRECV && (rxfill >= rf12_len + 5 || rxfill >= RF_MAX)) {
    1cd4:	80 91 62 00 	lds	r24, 0x0062
    1cd8:	85 30       	cpi	r24, 0x05	; 5
    1cda:	89 f5       	brne	.+98     	; 0x1d3e <rf12_recvDone+0x19a>
    1cdc:	80 91 66 00 	lds	r24, 0x0066
    1ce0:	20 91 63 00 	lds	r18, 0x0063
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	04 96       	adiw	r24, 0x04	; 4
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	82 17       	cp	r24, r18
    1cec:	93 07       	cpc	r25, r19
    1cee:	24 f0       	brlt	.+8      	; 0x1cf8 <rf12_recvDone+0x154>
    1cf0:	80 91 63 00 	lds	r24, 0x0063
    1cf4:	87 34       	cpi	r24, 0x47	; 71
    1cf6:	18 f1       	brcs	.+70     	; 0x1d3e <rf12_recvDone+0x19a>
        rxstate = TXIDLE;
    1cf8:	84 e0       	ldi	r24, 0x04	; 4
    1cfa:	80 93 62 00 	sts	0x0062, r24
        if (rf12_len > RF12_MAXDATA)
    1cfe:	80 91 66 00 	lds	r24, 0x0066
    1d02:	83 34       	cpi	r24, 0x43	; 67
    1d04:	30 f0       	brcs	.+12     	; 0x1d12 <rf12_recvDone+0x16e>
            rf12_crc = 1; // force bad crc if packet length is invalid
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	90 93 ed 00 	sts	0x00ED, r25
    1d0e:	80 93 ec 00 	sts	0x00EC, r24
        if (!(rf12_hdr & RF12_HDR_DST) || (nodeid & NODE_ID) == 31 ||
    1d12:	80 91 65 00 	lds	r24, 0x0065
    1d16:	86 ff       	sbrs	r24, 6
    1d18:	32 c0       	rjmp	.+100    	; 0x1d7e <rf12_recvDone+0x1da>
    1d1a:	20 91 60 00 	lds	r18, 0x0060
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	c9 01       	movw	r24, r18
    1d22:	8f 71       	andi	r24, 0x1F	; 31
    1d24:	90 70       	andi	r25, 0x00	; 0
    1d26:	8f 31       	cpi	r24, 0x1F	; 31
    1d28:	91 05       	cpc	r25, r1
    1d2a:	49 f1       	breq	.+82     	; 0x1d7e <rf12_recvDone+0x1da>
                (rf12_hdr & RF12_HDR_MASK) == (nodeid & NODE_ID)) {
    1d2c:	80 91 65 00 	lds	r24, 0x0065
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	82 27       	eor	r24, r18
    1d34:	93 27       	eor	r25, r19
    1d36:	8f 71       	andi	r24, 0x1F	; 31
    1d38:	90 70       	andi	r25, 0x00	; 0
        
    if (rxstate == TXRECV && (rxfill >= rf12_len + 5 || rxfill >= RF_MAX)) {
        rxstate = TXIDLE;
        if (rf12_len > RF12_MAXDATA)
            rf12_crc = 1; // force bad crc if packet length is invalid
        if (!(rf12_hdr & RF12_HDR_DST) || (nodeid & NODE_ID) == 31 ||
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	01 f1       	breq	.+64     	; 0x1d7e <rf12_recvDone+0x1da>
                (rf12_hdr & RF12_HDR_MASK) == (nodeid & NODE_ID)) {
            return 1; // it's a broadcast packet or it's addressed to this node
        }
    }
    if (rxstate == TXIDLE)
    1d3e:	80 91 62 00 	lds	r24, 0x0062
    1d42:	84 30       	cpi	r24, 0x04	; 4
    1d44:	f1 f4       	brne	.+60     	; 0x1d82 <rf12_recvDone+0x1de>
        rf12_xfer(RF_TXREG_WRITE + out);
    }
}

static void rf12_recvStart () {
    rxfill = rf12_len = 0;
    1d46:	10 92 66 00 	sts	0x0066, r1
    1d4a:	80 91 66 00 	lds	r24, 0x0066
    1d4e:	80 93 63 00 	sts	0x0063, r24
    rf12_crc = ~0;
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	9f ef       	ldi	r25, 0xFF	; 255
    1d56:	90 93 ed 00 	sts	0x00ED, r25
    1d5a:	80 93 ec 00 	sts	0x00EC, r24
#if RF12_VERSION >= 2
    if (group != 0)
    1d5e:	60 91 61 00 	lds	r22, 0x0061
    1d62:	66 23       	and	r22, r22
    1d64:	29 f0       	breq	.+10     	; 0x1d70 <rf12_recvDone+0x1cc>
        rf12_crc = _crc16_update(~0, group);
    1d66:	db de       	rcall	.-586    	; 0x1b1e <_crc16_update>
    1d68:	90 93 ed 00 	sts	0x00ED, r25
    1d6c:	80 93 ec 00 	sts	0x00EC, r24
#endif
    rxstate = TXRECV;    
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	80 93 62 00 	sts	0x0062, r24
    rf12_xfer(RF_RECEIVER_ON);
    1d76:	8d ed       	ldi	r24, 0xDD	; 221
    1d78:	92 e8       	ldi	r25, 0x82	; 130
    1d7a:	fe de       	rcall	.-516    	; 0x1b78 <rf12_xfer>
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <rf12_recvDone+0x1de>
        rxstate = TXIDLE;
        if (rf12_len > RF12_MAXDATA)
            rf12_crc = 1; // force bad crc if packet length is invalid
        if (!(rf12_hdr & RF12_HDR_DST) || (nodeid & NODE_ID) == 31 ||
                (rf12_hdr & RF12_HDR_MASK) == (nodeid & NODE_ID)) {
            return 1; // it's a broadcast packet or it's addressed to this node
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <rf12_recvDone+0x1e0>
        }
    }
    if (rxstate == TXIDLE)
        rf12_recvStart();
    return 0;
    1d82:	80 e0       	ldi	r24, 0x00	; 0
}
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <sendPacket>:

  // Re-enable interrupts (if they were ever enabled).
  // SREG = sreg;
}

static byte sendPacket (const void* buf, byte len) {
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	ec 01       	movw	r28, r24
    1d90:	16 2f       	mov	r17, r22

static uint8_t rf12_canSend () {
    // no need to test with interrupts disabled: state TXRECV is only reached
    // outside of ISR and we don't care if rxfill jumps from 0 to 1 here
    if (rxstate == TXRECV && rxfill == 0 &&
    1d92:	80 91 62 00 	lds	r24, 0x0062
    1d96:	85 30       	cpi	r24, 0x05	; 5
    1d98:	c9 f5       	brne	.+114    	; 0x1e0c <sendPacket+0x84>
    1d9a:	80 91 63 00 	lds	r24, 0x0063
    1d9e:	88 23       	and	r24, r24
    1da0:	a9 f5       	brne	.+106    	; 0x1e0c <sendPacket+0x84>
            (rf12_byte(0x00) & (RF_RSSI_BIT >> 8)) == 0) {
    1da2:	d5 de       	rcall	.-598    	; 0x1b4e <rf12_byte>
}

static uint8_t rf12_canSend () {
    // no need to test with interrupts disabled: state TXRECV is only reached
    // outside of ISR and we don't care if rxfill jumps from 0 to 1 here
    if (rxstate == TXRECV && rxfill == 0 &&
    1da4:	80 fd       	sbrc	r24, 0
    1da6:	32 c0       	rjmp	.+100    	; 0x1e0c <sendPacket+0x84>
            (rf12_byte(0x00) & (RF_RSSI_BIT >> 8)) == 0) {
        rf12_xfer(RF_IDLE_MODE); // stop receiver
    1da8:	8d e0       	ldi	r24, 0x0D	; 13
    1daa:	92 e8       	ldi	r25, 0x82	; 130
    1dac:	e5 de       	rcall	.-566    	; 0x1b78 <rf12_xfer>
        //XXX just in case, don't know whether these RF12 reads are needed!
        // rf12_xfer(0x0000); // status register
        // rf12_xfer(RF_RX_FIFO_READ); // fifo read
        rxstate = TXIDLE;
    1dae:	84 e0       	ldi	r24, 0x04	; 4
    1db0:	80 93 62 00 	sts	0x0062, r24
        rf12_grp = group;
    1db4:	80 91 61 00 	lds	r24, 0x0061
    1db8:	80 93 64 00 	sts	0x0064, r24
    }
    return 0;
}

static void rf12_sendStart (uint8_t hdr, const void* ptr, uint8_t len) {
    rf12_len = len;
    1dbc:	10 93 66 00 	sts	0x0066, r17
    memcpy((void*) rf12_data, ptr, len);
    1dc0:	41 2f       	mov	r20, r17
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	87 e6       	ldi	r24, 0x67	; 103
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	be 01       	movw	r22, r28
    1dca:	8b d0       	rcall	.+278    	; 0x1ee2 <memcpy>
    rf12_hdr = hdr & RF12_HDR_DST ? hdr :
    1dcc:	80 91 60 00 	lds	r24, 0x0060
    1dd0:	8f 71       	andi	r24, 0x1F	; 31
    1dd2:	80 5e       	subi	r24, 0xE0	; 224
    1dd4:	80 93 65 00 	sts	0x0065, r24
                (hdr & ~RF12_HDR_MASK) + (nodeid & NODE_ID);
    
    rf12_crc = ~0;
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	90 93 ed 00 	sts	0x00ED, r25
    1de0:	80 93 ec 00 	sts	0x00EC, r24
#if RF12_VERSION >= 2
    rf12_crc = _crc16_update(rf12_crc, rf12_grp);
    1de4:	80 91 ec 00 	lds	r24, 0x00EC
    1de8:	90 91 ed 00 	lds	r25, 0x00ED
    1dec:	60 91 64 00 	lds	r22, 0x0064
    1df0:	96 de       	rcall	.-724    	; 0x1b1e <_crc16_update>
    1df2:	90 93 ed 00 	sts	0x00ED, r25
    1df6:	80 93 ec 00 	sts	0x00EC, r24
#endif
    rxstate = TXPRE1;
    1dfa:	86 e0       	ldi	r24, 0x06	; 6
    1dfc:	80 93 62 00 	sts	0x0062, r24
    rf12_xfer(RF_XMITTER_ON); // bytes will be fed via interrupts
    1e00:	8d e3       	ldi	r24, 0x3D	; 61
    1e02:	92 e8       	ldi	r25, 0x82	; 130
    1e04:	b9 de       	rcall	.-654    	; 0x1b78 <rf12_xfer>
    rf12_recvDone();
  rf12_sendStart(RF12_HDR_ACK, buf, len);

  T(long t = millis());
  // this loop leads to a timeout of approx 200 ms without needing millis()
  for (word n = 0; n < 65000; ++n)
    1e06:	c0 e0       	ldi	r28, 0x00	; 0
    1e08:	d0 e0       	ldi	r29, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <sendPacket+0x88>
  // SREG = sreg;
}

static byte sendPacket (const void* buf, byte len) {
  while (!rf12_canSend())
    rf12_recvDone();
    1e0c:	cb de       	rcall	.-618    	; 0x1ba4 <rf12_recvDone>
    1e0e:	c1 cf       	rjmp	.-126    	; 0x1d92 <sendPacket+0xa>
  rf12_sendStart(RF12_HDR_ACK, buf, len);

  T(long t = millis());
  // this loop leads to a timeout of approx 200 ms without needing millis()
  for (word n = 0; n < 65000; ++n)
    if (rf12_recvDone() && rf12_crc == 0) {
    1e10:	c9 de       	rcall	.-622    	; 0x1ba4 <rf12_recvDone>
    1e12:	88 23       	and	r24, r24
    1e14:	49 f0       	breq	.+18     	; 0x1e28 <sendPacket+0xa0>
    1e16:	80 91 ec 00 	lds	r24, 0x00EC
    1e1a:	90 91 ed 00 	lds	r25, 0x00ED
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <sendPacket+0xa0>
      byte len = rf12_len;
    1e22:	80 91 66 00 	lds	r24, 0x0066
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <sendPacket+0xac>
    rf12_recvDone();
  rf12_sendStart(RF12_HDR_ACK, buf, len);

  T(long t = millis());
  // this loop leads to a timeout of approx 200 ms without needing millis()
  for (word n = 0; n < 65000; ++n)
    1e28:	21 96       	adiw	r28, 0x01	; 1
    1e2a:	8d ef       	ldi	r24, 0xFD	; 253
    1e2c:	c8 3e       	cpi	r28, 0xE8	; 232
    1e2e:	d8 07       	cpc	r29, r24
    1e30:	79 f7       	brne	.-34     	; 0x1e10 <sendPacket+0x88>
      T(Serial.println());
      return len;
    }
  T(Serial.print("timeout "));
  T(Serial.println(millis() - t));
  return 0;
    1e32:	80 e0       	ldi	r24, 0x00	; 0
}
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	08 95       	ret

00001e3c <calcCRC.clone.3>:
#define T(x) x
#else
#define T(x)
#endif

static word calcCRC (const void* ptr, word len) {
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	7c 01       	movw	r14, r24
  word crc = ~0;
    1e4a:	0e ee       	ldi	r16, 0xEE	; 238
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
  for (word i = 0; i < len; ++i)
    1e4e:	c0 e0       	ldi	r28, 0x00	; 0
    1e50:	d0 e0       	ldi	r29, 0x00	; 0
#else
#define T(x)
#endif

static word calcCRC (const void* ptr, word len) {
  word crc = ~0;
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <calcCRC.clone.3+0x26>
  for (word i = 0; i < len; ++i)
    crc = _crc16_update(crc, ((const char*) ptr)[i]);
    1e58:	f8 01       	movw	r30, r16
    1e5a:	61 91       	ld	r22, Z+
    1e5c:	8f 01       	movw	r16, r30
    1e5e:	5f de       	rcall	.-834    	; 0x1b1e <_crc16_update>
#define T(x)
#endif

static word calcCRC (const void* ptr, word len) {
  word crc = ~0;
  for (word i = 0; i < len; ++i)
    1e60:	21 96       	adiw	r28, 0x01	; 1
    1e62:	ce 15       	cp	r28, r14
    1e64:	df 05       	cpc	r29, r15
    1e66:	c0 f3       	brcs	.-16     	; 0x1e58 <calcCRC.clone.3+0x1c>
    crc = _crc16_update(crc, ((const char*) ptr)[i]);
  return crc;
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	08 95       	ret

00001e76 <validSketch>:
    for (word i = 0; i < len; ++i)
        crc = _crc16_update(crc, pgm_read_byte((word) ptr + i));
    return crc;
}

static byte validSketch () {
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
  return calcCRCrom(0, config.sketchBlocks << 6) == config.sketchCRC;
    1e7e:	00 91 f4 00 	lds	r16, 0x00F4
    1e82:	10 91 f5 00 	lds	r17, 0x00F5
    1e86:	36 e0       	ldi	r19, 0x06	; 6
    1e88:	00 0f       	add	r16, r16
    1e8a:	11 1f       	adc	r17, r17
    1e8c:	3a 95       	dec	r19
    1e8e:	e1 f7       	brne	.-8      	; 0x1e88 <validSketch+0x12>
  return crc;
}

static word calcCRCrom (const void* ptr, word len) {
    word crc = ~0;
    for (word i = 0; i < len; ++i)
    1e90:	c0 e0       	ldi	r28, 0x00	; 0
    1e92:	d0 e0       	ldi	r29, 0x00	; 0
    crc = _crc16_update(crc, ((const char*) ptr)[i]);
  return crc;
}

static word calcCRCrom (const void* ptr, word len) {
    word crc = ~0;
    1e94:	8f ef       	ldi	r24, 0xFF	; 255
    1e96:	9f ef       	ldi	r25, 0xFF	; 255
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <validSketch+0x2c>
    for (word i = 0; i < len; ++i)
        crc = _crc16_update(crc, pgm_read_byte((word) ptr + i));
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	64 91       	lpm	r22, Z+
    1e9e:	3f de       	rcall	.-898    	; 0x1b1e <_crc16_update>
  return crc;
}

static word calcCRCrom (const void* ptr, word len) {
    word crc = ~0;
    for (word i = 0; i < len; ++i)
    1ea0:	21 96       	adiw	r28, 0x01	; 1
    1ea2:	c0 17       	cp	r28, r16
    1ea4:	d1 07       	cpc	r29, r17
    1ea6:	c8 f3       	brcs	.-14     	; 0x1e9a <validSketch+0x24>
        crc = _crc16_update(crc, pgm_read_byte((word) ptr + i));
    return crc;
}

static byte validSketch () {
  return calcCRCrom(0, config.sketchBlocks << 6) == config.sketchCRC;
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	20 91 f6 00 	lds	r18, 0x00F6
    1eae:	30 91 f7 00 	lds	r19, 0x00F7
    1eb2:	82 17       	cp	r24, r18
    1eb4:	93 07       	cpc	r25, r19
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <validSketch+0x44>
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
}
    1eba:	84 2f       	mov	r24, r20
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <__vector_4>:

int main(void) __attribute__ ((naked)) __attribute__ ((section (".init9")));

volatile char dummy;

EMPTY_INTERRUPT(WDT_vect);
    1ec6:	18 95       	reti

00001ec8 <memcmp>:
    1ec8:	fb 01       	movw	r30, r22
    1eca:	dc 01       	movw	r26, r24
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <memcmp+0xe>
    1ece:	8d 91       	ld	r24, X+
    1ed0:	01 90       	ld	r0, Z+
    1ed2:	80 19       	sub	r24, r0
    1ed4:	21 f4       	brne	.+8      	; 0x1ede <memcmp+0x16>
    1ed6:	41 50       	subi	r20, 0x01	; 1
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	c8 f7       	brcc	.-14     	; 0x1ece <memcmp+0x6>
    1edc:	88 1b       	sub	r24, r24
    1ede:	99 0b       	sbc	r25, r25
    1ee0:	08 95       	ret

00001ee2 <memcpy>:
    1ee2:	fb 01       	movw	r30, r22
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <memcpy+0xa>
    1ee8:	01 90       	ld	r0, Z+
    1eea:	0d 92       	st	X+, r0
    1eec:	41 50       	subi	r20, 0x01	; 1
    1eee:	50 40       	sbci	r21, 0x00	; 0
    1ef0:	d8 f7       	brcc	.-10     	; 0x1ee8 <memcpy+0x6>
    1ef2:	08 95       	ret

00001ef4 <__eerd_block_tn84>:
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22

00001ef8 <__eerd_blraw_tn84>:
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e1 99       	sbic	0x1c, 1	; 28
    1efc:	fe cf       	rjmp	.-4      	; 0x1efa <__eerd_blraw_tn84+0x2>
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <__eerd_blraw_tn84+0x14>
    1f00:	ff bb       	out	0x1f, r31	; 31
    1f02:	ee bb       	out	0x1e, r30	; 30
    1f04:	e0 9a       	sbi	0x1c, 0	; 28
    1f06:	31 96       	adiw	r30, 0x01	; 1
    1f08:	0d b2       	in	r0, 0x1d	; 29
    1f0a:	0d 92       	st	X+, r0
    1f0c:	41 50       	subi	r20, 0x01	; 1
    1f0e:	50 40       	sbci	r21, 0x00	; 0
    1f10:	b8 f7       	brcc	.-18     	; 0x1f00 <__eerd_blraw_tn84+0x8>
    1f12:	08 95       	ret

00001f14 <__eewr_block_tn84>:
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <__eewr_block_tn84+0xa>
    1f1a:	2d 91       	ld	r18, X+
    1f1c:	05 d0       	rcall	.+10     	; 0x1f28 <__eewr_r18_tn84>
    1f1e:	41 50       	subi	r20, 0x01	; 1
    1f20:	50 40       	sbci	r21, 0x00	; 0
    1f22:	d8 f7       	brcc	.-10     	; 0x1f1a <__eewr_block_tn84+0x6>
    1f24:	08 95       	ret

00001f26 <__eewr_byte_tn84>:
    1f26:	26 2f       	mov	r18, r22

00001f28 <__eewr_r18_tn84>:
    1f28:	e1 99       	sbic	0x1c, 1	; 28
    1f2a:	fe cf       	rjmp	.-4      	; 0x1f28 <__eewr_r18_tn84>
    1f2c:	1c ba       	out	0x1c, r1	; 28
    1f2e:	9f bb       	out	0x1f, r25	; 31
    1f30:	8e bb       	out	0x1e, r24	; 30
    1f32:	2d bb       	out	0x1d, r18	; 29
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	e2 9a       	sbi	0x1c, 2	; 28
    1f3a:	e1 9a       	sbi	0x1c, 1	; 28
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	08 95       	ret
